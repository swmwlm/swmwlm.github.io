<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Topking's Blog]]></title>
  <link href="http://swmwlm.github.io/atom.xml" rel="self"/>
  <link href="http://swmwlm.github.io/"/>
  <updated>2017-02-09T13:37:54+08:00</updated>
  <id>http://swmwlm.github.io/</id>
  <author>
    <name><![CDATA[Topking]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用JWT来做后台认证api支撑（jwt-authentication-api）]]></title>
    <link href="http://swmwlm.github.io/blog/2017/01/18/jwt-authentication-api/"/>
    <updated>2017-01-18T11:08:58+08:00</updated>
    <id>http://swmwlm.github.io/blog/2017/01/18/jwt-authentication-api</id>
    <content type="html"><![CDATA[<p>为移动端api做认证时，通过token的方式来做认证。使用jwt规范，具体实现如（<a href="https://github.com/auth0/java-jwt">请参考java-jwt文档</a>）；
总体流程：用户登录后，签发token给客户端，并保存该token到缓存jwtCache中，客户端每次访问api时，请求头中带token过来，判断该token是否是签发过的token，若是运行访问，不是，则拒绝访问；</p>

<!--more-->


<pre><code>遇到的问题：

        1.单使用jwt，当到过期时间时，用户继续访问会被强制性退出。
        2.当用户在web端修改了用户密码，或者禁止用户登录，怎样判定该token失效，让用户退出登录；

解决方法： 

        1.与ehcache集成，设定缓存的失效时间与过期存活时间。
        2.用户修改密码或者禁止登录时，对该用户的jwtCache缓存进行清除；拦截器中判定该token是否存在 于缓存该用户的集合中，若存在，则有效，不存在则无效，退出登录；
</code></pre>

<h2>1. 登录成功，生成token:</h2>

<pre><code>1.1 token中payload的自定义数据为（userId，签发日期,随机数），随机数是为了同一用户在不同设备同时登录时（或者并发之类），使得签发的token做唯一性处理；

1.2 secret定义为配置文件的jwtSecret:uuid；

1.3 把生成的token存放在缓存jwtCache中；其中jwtCache缓存定义的过期时间为十四天，过期还可以存活的时间设置为半小时；缓存存放时以userId为key，value值为Set&lt;String&gt;类型的token集合；

1.4 把生成的 token 返回给客户端调用者；
</code></pre>

<h2>2. 当用户的密码被修改或者loginFlag=0，从jwtCache缓存中清除该userId对应的值；</h2>

<h2>3. 拦截器校验token是否有效；我们说登录成功后，签发出去的token都是永久可校验通过的；</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>try{
</span><span class='line'>      3.1 获取客户端请求过来的token=request.getHeader("token");
</span><span class='line'>
</span><span class='line'>      3.2 校验token（JWT jwt = verifier.verify(token)）;
</span><span class='line'>
</span><span class='line'>          3.2.1 获取当前token中的userId,签发日期；
</span><span class='line'>                  Set&lt;String&gt; tokens=jwtCache.get(userId);
</span><span class='line'>                  判断当前用户所签发的所有tokens中是否存在该token，若不存在，表示该token已过期失效，禁止访问api；
</span><span class='line'>
</span><span class='line'>          3.2.2 若存在该token，表示该token未过期，允许访问api；
</span><span class='line'>
</span><span class='line'>  }catch(JWTVerificationException e){
</span><span class='line'>  ------------------------
</span><span class='line'>      3.3 INVALID:校验失败的token，禁止继续访问api
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用tengine DSO 来动态编译安装第三方模块（Lua-nginx-module）]]></title>
    <link href="http://swmwlm.github.io/blog/2016/06/01/tengine-add-thirdparty-module-dynamic/"/>
    <updated>2016-06-01T14:28:58+08:00</updated>
    <id>http://swmwlm.github.io/blog/2016/06/01/tengine-add-thirdparty-module-dynamic</id>
    <content type="html"><![CDATA[<p>在使用nginx时，需要增加或者改动一个模块，都需要重新编译nginx文件。最近使用了tengine，它提供的DSO工具来动态加载模块。本例测试需要动态增加lua-nginx模块，记录一下安装过程。</p>

<!--more-->


<h2>1. 编译安装 luajit</h2>

<p>Lua 环境推荐使用成熟快速的 luajit。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /root/Download/
</span><span class='line'>wget http://luajit.org/download/LuaJIT-2.0.4.tar.gz
</span><span class='line'>tar zxvf LuaJIT-2.0.4.tar.gz
</span><span class='line'>cd /root/Downloads/LuaJIT-2.0.4
</span><span class='line'>make && make install PREFIX=/usr/local/luajit-2.0.4
</span></code></pre></td></tr></table></div></figure>


<h2>2. 设置环境变量：</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># tell nginx's build system where to find LuaJIT 2.0:
</span><span class='line'>export LUAJIT_LIB=/usr/local/luajit-2.0.4/lib
</span><span class='line'>export LUAJIT_INC=/usr/local/luajit-2.0.4/include/luajit-2.0</span></code></pre></td></tr></table></div></figure>


<h2>3. 你能够使用dso_tool(在Nginx安装目录的sbin下)这个工具来编译第三方模块 lua-nginx-module.</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /root/Download/
</span><span class='line'>wget --no-check-certificate https://github.com/openresty/lua-nginx-module/archive/v0.9.19.tar.gz
</span><span class='line'>tar zxvf v0.9.19.tar.gz 
</span><span class='line'>cd /usr/local/tengine/sbin/
</span><span class='line'>./dso_tool --add-module=/root/Downloads/LuaJIT-2.0.4</span></code></pre></td></tr></table></div></figure>


<h2>4. 编译成功时，如下图</h2>

<p><img src="http://swmwlm.github.io/images/tengine/tengine-2.png"></p>

<h2>5. 设置动态库</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo '/usr/local/luajit-2.0.4/lib'&gt;&gt;/etc/ld.so.conf.d/usr_local_luajit_lib.conf 
</span><span class='line'>ldconfig</span></code></pre></td></tr></table></div></figure>


<h2>6. 配置tengine的配置文件，动态加载模块，如下图所示：</h2>

<p><img src="http://swmwlm.github.io/images/tengine/tengine-1.png"></p>

<p>使用./nginx -t 测试配置文件是否通过。提示成功，则打开浏览器访问/lua路径，测试第三方模块lua-nginx-module是否正常。</p>

<h2>7. 全新编译安装Tengine+Lua</h2>

<h3>7.1 编译安装nginx需要的依赖包</h3>

<pre><code>yum install gcc gcc-c++ make automake autoconf libtool pcre pcre-devel zlib zlib-devel openssl openssl-devel
</code></pre>

<h3>7.2 编译安装Lua需要的依赖包（centos默认可能装过了，可省略，rpm -qa|grep readline查询）</h3>

<pre><code>yum install readline readline-devel

或者手动编译安装

wget -c ftp://ftp.gnu.org/gnu/readline/readline-6.2.tar.gz 
tar -zxvf readline-6.2.tar.gz 
cd readline-6.2
./configure
make &amp;&amp; make installl

手动编译后如果指定了 prefix ，要修改一下 lua 的编译脚本
修改lua src/Makefile
修改MYCFLAGS=-I/usr/local/readline/include
修改MYLDFLAGS=-L/usr/local/readline/lib
直接执行lua命令，出现加载不了readline.so的问题，软链接 /usr/local/readline/lib/libreadline.so.6 到 /usr/lib/
</code></pre>

<h3>7.3 安装lua</h3>

<pre><code>yum安装:
yum install lua lua-devel

安装Lua或者LuaJIT都是可以的，但是出于效率的考虑，推荐安装LuaJIT。源码安装LuaGIT如下：
LuaGIT官方地址: http://luajit.org/
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://luajit.org/download/LuaJIT-2.0.4.tar.gz
</span><span class='line'>cd /usr/local/src 
</span><span class='line'>tar -zxvf LuaJIT-2.0.4.tar.gz 
</span><span class='line'>cd LuaJIT-2.0.4
</span><span class='line'>make
</span><span class='line'>make install                                                       (也可以使用make install PREFIX=/usr/local/luagit-2.0.4)
</span><span class='line'>ln -s /usr/local/lib/libluajit-5.1.so.2 /lib64/libluajit-5.1.so.2    (ln -s /usr/local/luagit-2.0.4/lib/libluajit-5.1.so.2 /lib64/libluajit-5.1.so.2)
</span><span class='line'>export LUAJIT_LIB=/usr/local/lib                                       (export LUAJIT_LIB=/usr/local/luagit-2.0.4/lib)
</span><span class='line'>export LUAJIT_INC=/usr/local/include/luajit-2.0/                   (export LUAJIT_INC=/usr/local/luagit-2.0.4/include/luajit-2.0/)</span></code></pre></td></tr></table></div></figure>


<pre><code>因为安装在缺省路径，所以LuaJIT对应的lib，include均在/usr/local目录里。
</code></pre>

<blockquote><p><a href="http://huoding.com/2012/08/31/156">请参考博文</a></p></blockquote>

<p>创建www用户和组:</p>

<pre><code>sudo groupadd www
sudo useradd www -g www -s /sbin/nologin -M 
</code></pre>

<p>另外，可以安装jemalloc，优化内存管理</p>

<pre><code>wget http://www.canonware.com/download/jemalloc/jemalloc-3.6.0.tar.bz2
tar xjf jemalloc-3.6.0.tar.bz2
cd jemalloc-3.6.0
./configure
make &amp;&amp; make install
echo '/usr/local/lib' &gt; /etc/ld.so.conf.d/local.conf
ldconfig
</code></pre>

<h4>7.3.1 使用jemalloc优化MySQL</h4>

<pre><code>方法1.

MySQL/MaridDB 5.5编译方法，cmake预编译时加上下面参数

-DCMAKE_EXE_LINKER_FLAGS="-ljemalloc" -DWITH_SAFEMALLOC=OFF

方法2.

修改mysqld_safe直接加载:

查找文件 /usr/local/mysql/bin/mysqld_safe
在#executing mysqld_safe 下面加上

LD_PRELOAD=/usr/local/lib/libjemalloc.so

重新启动MYSQL

使用下面代码自动修改mysqld_safe文件

sed -i 's@executing mysqld_safe@executing mysqld_safe\nexport LD_PRELOAD=/usr/local/lib/libjemalloc.so@' /usr/local/mysql/bin/mysqld_safe
service mysqld restart
</code></pre>

<h4>7.3.2 使用jemalloc优化Nginx</h4>

<pre><code>编译NGINX时添加以下参数:
--with-ld-opt="-ljemalloc"

具体实现：

cd lnmp/src/nginx-1.4.2
make clean
./configure --prefix=/usr/local/nginx --user=www --group=www \  
--with-http_stub_status_module --with-http_ssl_module --with-http_flv_module \ 
--with-http_gzip_static_module --with-ld-opt="-ljemalloc" (或者 --with-jemalloc)
make &amp;&amp; make install
</code></pre>

<p>验证 jemalloc 是否运行:</p>

<pre><code>lsof -n | grep jemalloc
</code></pre>

<h3>7.4 编译Tengine</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>shell&gt; wget http://tengine.taobao.org/download/tengine-2.1.2.tar.gz
</span><span class='line'>shell&gt; tar zxvf tengine-2.1.2.tar.gz
</span><span class='line'>shell&gt; cd tengine-2.1.2
</span><span class='line'>shell&gt; ./configure --prefix=/usr/local/tengine-2.1.2 --with-http_lua_module --with-luajit-lib=/usr/local/luagit-2.0.4/lib/ --with-luajit-inc=/usr/local/luagit-2.0.4/include/luajit-2.0/ --pid-path=/var/run/nginx.pid --group=www --user=www --dso-path=/usr/local/tengine-2.1.2/modules --with-http_gzip_static_module --with-http_stub_status_module --with-poll_module --with-http_sub_module --with-http_realip_module --with-http_concat_module --http-proxy-temp-path=/var/tmp/tengine-2.1.2/proxy_temp --http-fastcgi-temp-path=/var/tmp/tengine-2.1.2/fastcgi_temp --http-uwsgi-temp-path=/var/tmp/tengine-2.1.2/uwsgi_temp --http-scgi-temp-path=/var/tmp/tengine-2.1.2/cgi_temp --http-client-body-temp-path=/var/tmp/tengine-2.1.2/client_body_temp --http-log-path=/var/log/tengine-2.1.2/access.log --error-log-path=/var/log/tengine-2.1.2/error.log --with-ld-opt="-Wl,-rpath,$LUAJIT_LIB,-ljemalloc"
</span><span class='line'>
</span><span class='line'>shell&gt; make&& make install
</span><span class='line'>
</span><span class='line'>shell&gt; ln -s /usr/local/tengine-2.1.2 /usr/local/nginx （创建软连接，可省略）
</span><span class='line'>shell&gt; mkdir /var/tmp/tengine-2.1.2 -p           （创建所需的目录以及赋权）
</span><span class='line'>shell&gt; chown -R www:www /var/tmp/tengine-2.1.2
</span><span class='line'>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<pre><code>参数说明：由于Pcre是通过yum安装的，不用使用--with-pcre=/path/to/ 指定。
lua是手动安装的需要配置参数
--with-http_lua_module 
--with-luajit-lib=/usr/local/luagit-2.0.4/lib/  --with-luajit-inc=/usr/local/luagit-2.0.4/include/luajit-2.0/ 

--prefix安装的目录

作用：不指定prefix，则可执行文件默认放在/usr/local/bin,库文件默认在/usr/local/lib,配置文件在/usr/local/etc,其他资源文件放在/usr/local/share。若要卸载这个程序，要么在原来的make目录下执行make uninstall(前提是make文件指定过uninstall),要么去上述默认目录里把相关的文件夹一个个的删掉。但是，对于指定了prefix的目录的好处是卸载软件或者移植软件。当某个软件不再需要时，只须简单删除该文件安装目录，就可以把软件卸载干净；移植软件只需要拷贝整个目录到另外一个机器即可（相同的操作系统及环境依赖）。

--with-ld-opt

其中的 --with-ld-opt=-Wl,-rpath,/usr/local/lib:/opt/openresty/luajit/lib 意思是：这是链接器选项，目的是把/usr/loca/lib和/opt/openresty/luajit/lib这两个路径添加进nginx可执行文件的RPATH头重，这样在启动的时候，系统就可以找到正确的动态链接库文件。

若不使用该参数指定动态的链接库，试着使用 ./nginx 启动tengine,如果运气不好的话，可能遇到如下错误：

cannot open shared object file: No such file or directory

这是什么情况呢？可以使用ldd命令来查看：
ldd /usr/local/tengine-2.1.0/sbin/nginx
会出现xxxx-xxxx.so =&gt; not found

此类问题通常使用ldconfig命令就能解决，例如本例有可能出现的
libluajit-&lt;VERSION&gt;.so =&gt; not found

我们使用如下命令：（由于我们默认安装libluagit动态链接库默认安装至/usr/local/lib）
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>shell&gt; echo "/usr/local/lib" &gt; /etc/ld.so.conf.d/usr_local_lib.conf
</span><span class='line'>shell&gt; ldconfig</span></code></pre></td></tr></table></div></figure>


<pre><code>再次启动nginx，应该就OK了。
</code></pre>

<h3>7.5 测试lua是否可以使用了</h3>

<p>配置下面代码至nginx.conf的server 中，并重新加载配置文件（./nginx -s reload），</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>location /lua {
</span><span class='line'>    set $test "hello, world.";
</span><span class='line'>    content_by_lua '
</span><span class='line'>        ngx.header.content_type = "text/plain";
</span><span class='line'>        ngx.say(ngx.var.test);
</span><span class='line'>    ';
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ajax分页时，点击第N页链接，回退会返回第一页解决方法]]></title>
    <link href="http://swmwlm.github.io/blog/2015/12/30/ajax-backspace/"/>
    <updated>2015-12-30T14:28:58+08:00</updated>
    <id>http://swmwlm.github.io/blog/2015/12/30/ajax-backspace</id>
    <content type="html"><![CDATA[<h2>1. 问题产生的描述</h2>

<p>　　ajax做列表数据分页时，例如，当点击跳转至第三页后，点击一个链接，跳转至详情页，再点后退就是返回第一页列表数据了，怎么能使他还是第三页？</p>

<!--more-->


<p>　　AJAX可以做出各种效果来，但是有一点始终是不好解决，那就是回退和刷新的问题。
由于在AJAX的异步机制，即使页面大部分被替换掉，浏览器地址栏也不会有变化，地址栏没有变化，当然就不存在历史记录了，没有历史纪录，of course就没有办法回退或者在刷新之后出现期望的内容了。
　　所以问题的所在就是地址栏，如何产生有效地地址呢？那首先就要明白一个URL是如何构成的：例如：</p>

<p>　　　　<a href="http://www.example.com:8080/test.cgi?op=hello&amp;cd=1#339933=ass?xa">http://www.example.com:8080/test.cgi?op=hello&amp;cd=1#339933=ass?xa</a></p>

<p>　　　　这个URL地址分为几个部分：</p>

<p>　　　　协议：http</p>

<p>　　　　主机：www.example.com</p>

<p>　　　　端口：8080 （http的缺省端口是80）</p>

<p>　　　　路径：/test.cgi</p>

<p>　　　　search键：?op=hello&amp;cp=1</p>

<p>　　　　hash键：#339933=ass?xa</p>

<p>　　除了hash键的更动，其他任意部分的更动都会引起页面的重载。所以只有选择hash键来保存一些状态了。</p>

<p>　　也就是说，我们记录中间状态的存储器有了，但是该如何使用呢，这就需要解释器来重现存储器的内容了。
说的更基础原理一点（相信不懂基础原理的专业人士还是不多，而不是专业人员也没兴趣看这个），就像内存映像，多任务OS切换任务是很频繁的，在每次切换任务的时候操统要干两件事：一个就是保存上一个程序的中间状态，以方便下次加载程序；另一件事就是加载下一个程序的状态，使得这个程序能接着上次调度的结果运行。</p>

<p>所以，我们要做一个类似于切换程序用的解释器。这里解释器大致有三件事：1.定义存储器的使用规则，也就是说hash键主要有哪些部分组成，什么字段用在什么地方干嘛用；二：切换之前清场，将该保存的保存，该为新页面铺垫也不能漏了；三：根据新的hash键生成新的页面。</p>

<p>这个解释器呢，是与具体应用相关的，所以具体细节是需要研究业务的。但是在其中有个技术问题需要注意：
解释器是如何激活的？这里面涉及到IE和firefox的差异。</p>

<p>HASH键的改变在FireFox是会产生历史纪录的，而在IE中没这回事，所以这需要区别对待。以下是基本流程：
1）onload函数调用解释器的加载页面部分；
2）加载新页面之前生成相对应得HASH键；
3）针对FireFox可以直接更改地址栏，加载页面；针对IE要使用IFRAME，更改IFRAME的src的URL的search键为hash键，然后再由IFRAME加载的页面的onload函数调用解释器的加载页面部分，要记得一点：IFRAME的display样式设为none，要不会有些小毛小病的。</p>

<p>具体技术呢，大致写两页投稿是没有问题的，我还是比较懒，就不多写了。大致原理讲到了，能者就会了，不能者可以钻研一下。</p>

<p>忘了说了，刷新的问题实在是没有什么好招了，以上的方法虽然可以在刷新之后得到正确的页面，但是地址栏的历史纪录大概是丢了不少了，这也是没有办法的事情，有得必有失，浏览器在平衡安全和性能，使用浏览器的也需要权衡些东东。</p>

<h2>2. 案例解决</h2>

<p>　　有了上面的理论作为支撑，也找到了在实际开发中的解决方案： 比较好的方法是用location.hash 来记录，比如在跳转至第3页的时候，先用js 保存当前的location.hash为3：</p>

<pre><code>location.hash="3"; 
</code></pre>

<p>这样的操作不会导致页面刷新，但是却会被记录到浏览器历史里面。等到返回上一页等操作的时候，在加载初始化数据之前，先看看有没有location.hash，有的话就从里面恢复当前的页码，否则就加载第一页。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">currentPage</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="c1">//location.hash会以#3形式出现；截去#，保留页数进行传递</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">){</span><span class="c1">//////////////////////////////////第二步.根据页面跳转时，存在于location.hash记录的页码进行调用ajax</span>
</span><span class='line'>    <span class="nx">currentPage</span><span class="o">=</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;#&#39;</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//使用kkpager，产生分页</span>
</span><span class='line'><span class="nx">template</span><span class="p">.</span><span class="nx">helper</span><span class="p">(</span><span class="s1">&#39;generPagination&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">pageNo</span><span class="p">,</span> <span class="nx">totalPage</span><span class="p">,</span> <span class="nx">totalRecord</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//生成分页控件</span>
</span><span class='line'>    <span class="nx">kkpager</span><span class="p">.</span><span class="nx">generPageHtml</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">pagerid</span><span class="o">:</span> <span class="s1">&#39;kkpager&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">pno</span><span class="o">:</span> <span class="nx">pageNo</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">mode</span><span class="o">:</span> <span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="c1">//设置为click模式</span>
</span><span class='line'>        <span class="c1">//总页码</span>
</span><span class='line'>        <span class="nx">total</span><span class="o">:</span> <span class="nx">totalPage</span><span class="p">,</span>
</span><span class='line'>        <span class="c1">//总数据条数</span>
</span><span class='line'>        <span class="nx">totalRecords</span><span class="o">:</span> <span class="nx">totalRecord</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">isGoPage</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">isShowCurrPage</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">isShowTotalPage</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="c1">//点击页码、页码输入框跳转、以及首页、下一页等按钮都会调用click</span>
</span><span class='line'>        <span class="c1">//适用于不刷新页面，比如ajax</span>
</span><span class='line'>        <span class="nx">click</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">//这里可以做自已的处理</span>
</span><span class='line'>            <span class="nx">searchPro</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span>
</span><span class='line'>            <span class="c1">//处理完后可以手动条用selectPage进行页码选中切换</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">selectPage</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="o">=</span><span class="nx">n</span><span class="p">;</span><span class="c1">///////////////////////////第一步.在做页面点击跳转的时候，记录当前的页码</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="c1">//getHref是在click模式下链接算法，一般不需要配置，默认代码如下</span>
</span><span class='line'>        <span class="nx">getHref</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="s1">&#39;#&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">},</span> <span class="kc">true</span><span class="p">);</span><span class="c1">//这里true，很重要，自己扒源码看</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//ajax搜索项目</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">searchPro</span><span class="p">(</span><span class="nx">pageNo</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;${path}/activity/searchProjectList&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;post&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">pageNo</span><span class="o">:</span> <span class="nx">pageNo</span><span class="p">,</span> <span class="nx">words</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#words&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">(),</span> <span class="nx">orderBy</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.xmzs .p-top ul .selectblue&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;orderBy&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">dataType</span><span class="o">:</span> <span class="s2">&quot;json&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">html</span> <span class="o">=</span> <span class="nx">template</span><span class="p">(</span><span class="s1">&#39;searchProjectsTemplate&#39;</span><span class="p">,</span> <span class="nx">result</span><span class="p">.</span><span class="nx">mapRet</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#projectList&quot;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">html</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">fnRadialIndicatorExec</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL数据库存储过程动态表建立]]></title>
    <link href="http://swmwlm.github.io/blog/2015/12/25/mysql-procedure/"/>
    <updated>2015-12-25T14:28:58+08:00</updated>
    <id>http://swmwlm.github.io/blog/2015/12/25/mysql-procedure</id>
    <content type="html"><![CDATA[<h2>1. 存储过程简介</h2>

<p>　　我们常用的操作数据库语言SQL语句在执行的时候需要要先编译，然后执行，而存储过程（Stored Procedure）是一组为了完成特定功能的SQL语句集，经编译后存储在数据库中，用户通过指定存储过程的名字并给定参数（如果该存储过程带有参数）来调用执行它。</p>

<!--more-->


<p>　　一个存储过程是一个可编程的函数，它在数据库中创建并保存。它可以有SQL语句和一些特殊的控制结构组成。当希望在不同的应用程序或平台上执行相同的函数，或者封装特定功能时，存储过程是非常有用的。数据库中的存储过程可以看做是对编程中面向对象方法的模拟。它允许控制数据的访问方式。</p>

<p>　　存储过程通常有以下优点：</p>

<p>　　　　(1).存储过程增强了SQL语言的功能和灵活性。存储过程可以用流控制语句编写，有很强的灵活性，可以完成复杂的判断和较复杂的运算。</p>

<p>　　　　(2).存储过程允许标准组件是编程。存储过程被创建后，可以在程序中被多次调用，而不必重新编写该存储过程的SQL语句。而且数据库专业人员可以随时对存储过程进行修改，对应用程序源代码毫无影响。</p>

<p>　　　　(3).存储过程能实现较快的执行速度。如果某一操作包含大量的Transaction-SQL代码或分别被多次执行，那么存储过程要比批处理的执行速度快很多。因为存储过程是预编译的。在首次运行一个存储过程时查询，优化器对其进行分析优化，并且给出最终被存储在系统表中的执行计划。而批处理的Transaction-SQL语句在每次运行时都要进行编译和优化，速度相对要慢一些。</p>

<p>　　　　(4).存储过程能过减少网络流量。针对同一个数据库对象的操作（如查询、修改），如果这一操作所涉及的Transaction-SQL语句被组织程存储过程，那么当在客户计算机上调用该存储过程时，网络中传送的只是该调用语句，从而大大增加了网络流量并降低了网络负载。</p>

<p>　　　　(5).存储过程可被作为一种安全机制来充分利用。系统管理员通过执行某一存储过程的权限进行限制，能够实现对相应的数据的访问权限的限制，避免了非授权用户对数据的访问，保证了数据的安全。</p>

<h2>2. 关于MySQL的存储过程</h2>

<p>　　存储过程是数据库存储的一个重要的功能，但是MySQL在5.0以前并不支持存储过程，这使得MySQL在应用上大打折扣。好在MySQL 5.0终于开始已经支持存储过程，这样即可以大大提高数据库的处理速度，同时也可以提高数据库编程的灵活性。</p>

<h2>3. MySQL存储过程的创建</h2>

<h3>(1). 格式</h3>

<p>　　MySQL存储过程创建的格式：CREATE PROCEDURE 过程名 ([过程参数[,&hellip;]])
[特性 &hellip;] 过程体</p>

<p>这里先举个例子：</p>

<pre><code>mysql&gt; DELIMITER //  
mysql&gt; CREATE PROCEDURE proc1(OUT s int)  
    -&gt; BEGIN 
    -&gt; SELECT COUNT(*) INTO s FROM user;  
    -&gt; END 
    -&gt; //  
mysql&gt; DELIMITER ; 
</code></pre>

<p>注：（1）这里需要注意的是DELIMITER //和DELIMITER ;两句，DELIMITER是分割符的意思，因为MySQL默认以";&ldquo;为分隔符，如果我们没有声明分割符，那么编译器会把存储过程当成SQL语句进行处理，则存储过程的编译过程会报错，所以要事先用DELIMITER关键字申明当前段分隔符，这样MySQL才会将&rdquo;;&ldquo;当做存储过程中的代码，不会执行这些代码，用完了之后要把分隔符还原。</p>

<p>　　（2）存储过程根据需要可能会有输入、输出、输入输出参数，这里有一个输出参数s，类型是int型，如果有多个参数用",&ldquo;分割开。</p>

<p>　　（3）过程体的开始与结束使用BEGIN与END进行标识。</p>

<p>这样，我们的一个MySQL存储过程就完成了，是不是很容易呢?看不懂也没关系，接下来，我们详细的讲解。</p>

<h3>(2). 声明分割符</h3>

<p>其实，关于声明分割符，上面的注解已经写得很清楚，不需要多说，只是稍微要注意一点的是：如果是用MySQL的Administrator管理工具时，可以直接创建，不再需要声明。</p>

<h3>(3). 参数</h3>

<p>　　MySQL存储过程的参数用在存储过程的定义，共有三种参数类型,IN,OUT,INOUT,形式如：</p>

<pre><code>CREATE PROCEDURE([[IN |OUT |INOUT ] 参数名 数据类形...])
</code></pre>

<p>　　IN 输入参数:表示该参数的值必须在调用存储过程时指定，在存储过程中修改该参数的值不能被返回，为默认值</p>

<p>　　OUT 输出参数:该值可在存储过程内部被改变，并可返回</p>

<p>　　INOUT 输入输出参数:调用时指定，并且可被改变和返回</p>

<h4>Ⅰ. IN参数例子</h4>

<p>创建:</p>

<pre><code>mysql &gt; DELIMITER //  
mysql &gt; CREATE PROCEDURE demo_in_parameter(IN p_in int)  
-&gt; BEGIN   
-&gt; SELECT p_in;   
-&gt; SET p_in=2;   
-&gt; SELECT p_in;   
-&gt; END;   
-&gt; //  
mysql &gt; DELIMITER ; 
</code></pre>

<p>执行结果:</p>

<pre><code>mysql &gt; SET @p_in=1;  
mysql &gt; CALL demo_in_parameter(@p_in);  
+------+  
| p_in |  
+------+  
|   1  |   
+------+  

+------+  
| p_in |  
+------+  
|   2  |   
+------+  

mysql&gt; SELECT @p_in;  
+-------+  
| @p_in |  
+-------+  
|  1    |  
+-------+  
</code></pre>

<p>以上可以看出，p_in虽然在存储过程中被修改，但并不影响@p_id的值</p>

<h4>Ⅱ.OUT参数例子</h4>

<p>创建:</p>

<pre><code>mysql &gt; DELIMITER //  
mysql &gt; CREATE PROCEDURE demo_out_parameter(OUT p_out int)  
-&gt; BEGIN 
-&gt; SELECT p_out;  
-&gt; SET p_out=2;  
-&gt; SELECT p_out;  
-&gt; END;  
-&gt; //  
mysql &gt; DELIMITER ; 
</code></pre>

<p>执行结果:</p>

<pre><code>mysql &gt; SET @p_out=1;  
mysql &gt; CALL sp_demo_out_parameter(@p_out);  
+-------+  
| p_out |   
+-------+  
| NULL  |   
+-------+  

+-------+  
| p_out |  
+-------+  
|   2   |   
+-------+  

mysql&gt; SELECT @p_out;  
+-------+  
| p_out |  
+-------+  
|   2   |  
+-------+  
</code></pre>

<h4>Ⅲ. INOUT参数例子</h4>

<p>创建:</p>

<pre><code>mysql &gt; DELIMITER //   
mysql &gt; CREATE PROCEDURE demo_inout_parameter(INOUT p_inout int)   
-&gt; BEGIN 
-&gt; SELECT p_inout;  
-&gt; SET p_inout=2;  
-&gt; SELECT p_inout;   
-&gt; END;  
-&gt; //   
mysql &gt; DELIMITER ; 
</code></pre>

<p>执行结果:</p>

<pre><code>mysql &gt; SET @p_inout=1;  
mysql &gt; CALL demo_inout_parameter(@p_inout) ;  
+---------+  
| p_inout |  
+---------+  
|    1    |  
+---------+  

+---------+  
| p_inout |   
+---------+  
|    2    |  
+---------+  

mysql &gt; SELECT @p_inout;  
+----------+  
| @p_inout |   
+----------+  
|    2     |  
+----------+ 
</code></pre>

<h3>(4). 变量</h3>

<h4>Ⅰ. 变量定义</h4>

<pre><code>DECLARE variable_name [,variable_name...] datatype [DEFAULT value];
</code></pre>

<p>　　其中，datatype为MySQL的数据类型，如:int, float, date, varchar(length)</p>

<p>　　例如:</p>

<pre><code>DECLARE l_int int unsigned default 4000000;  
DECLARE l_numeric number(8,2) DEFAULT 9.95;  
DECLARE l_date date DEFAULT '1999-12-31';  
DECLARE l_datetime datetime DEFAULT '1999-12-31 23:59:59';  
DECLARE l_varchar varchar(255) DEFAULT 'This will not be padded';   
</code></pre>

<h4>Ⅱ. 变量赋值</h4>

<pre><code>SET 变量名 = 表达式值 [,variable_name = expression ...]
</code></pre>

<h5>Ⅲ. 用户变量</h5>

<p>ⅰ. 在MySQL客户端使用用户变量</p>

<pre><code>mysql &gt; SELECT 'Hello World' into @x;  
mysql &gt; SELECT @x;  
+-------------+  
|   @x        |  
+-------------+  
| Hello World |  
+-------------+  
mysql &gt; SET @y='Goodbye Cruel World';  
mysql &gt; SELECT @y;  
+---------------------+  
|     @y              |  
+---------------------+  
| Goodbye Cruel World |  
+---------------------+  

mysql &gt; SET @z=1+2+3;  
mysql &gt; SELECT @z;  
+------+  
| @z   |  
+------+  
|  6   |  
+------+  
</code></pre>

<p>ⅱ. 在存储过程中使用用户变量</p>

<pre><code>mysql &gt; CREATE PROCEDURE GreetWorld( ) SELECT CONCAT(@greeting,' World');  
mysql &gt; SET @greeting='Hello';  
mysql &gt; CALL GreetWorld( );  
+----------------------------+  
| CONCAT(@greeting,' World') |  
+----------------------------+  
|  Hello World               |  
+----------------------------+  
</code></pre>

<p>ⅲ. 在存储过程间传递全局范围的用户变量</p>

<pre><code>mysql&gt; CREATE PROCEDURE p1()   SET @last_procedure='p1';  
mysql&gt; CREATE PROCEDURE p2() SELECT CONCAT('Last procedure was ',@last_proc);  
mysql&gt; CALL p1( );  
mysql&gt; CALL p2( );  
+-----------------------------------------------+  
| CONCAT('Last procedure was ',@last_proc  |  
+-----------------------------------------------+  
| Last procedure was p1                         |  
+-----------------------------------------------+  
</code></pre>

<p>注意:</p>

<p>①用户变量名一般以@开头</p>

<p>②滥用用户变量会导致程序难以理解及管理</p>

<h3>(5). 注释</h3>

<p>MySQL存储过程可使用两种风格的注释</p>

<p>双模杠：&ndash;</p>

<p>该风格一般用于单行注释</p>

<p>c风格： 一般用于多行注释</p>

<p>例如：</p>

<pre><code>mysql &gt; DELIMITER //  
mysql &gt; CREATE PROCEDURE proc1 --name存储过程名  
-&gt; (IN parameter1 INTEGER)   
-&gt; BEGIN   
-&gt; DECLARE variable1 CHAR(10);   
-&gt; IF parameter1 = 17 THEN   
-&gt; SET variable1 = 'birds';   
-&gt; ELSE 
-&gt; SET variable1 = 'beasts';   
-&gt; END IF;   
-&gt; INSERT INTO table1 VALUES (variable1);  
-&gt; END   
-&gt; //  
mysql &gt; DELIMITER ;  
</code></pre>

<h2>4.MySQL存储过程的调用</h2>

<p>　　用call和你过程名以及一个括号，括号里面根据需要，加入参数，参数包括输入参数、输出参数、输入输出参数。具体的调用方法可以参看上面的例子。</p>

<h2>5.MySQL存储过程的查询</h2>

<p>　　我们像知道一个数据库下面有那些表，我们一般采用show tables;进行查看。那么我们要查看某个数据库下面的存储过程，是否也可以采用呢？答案是，我们可以查看某个数据库下面的存储过程，但是是令一钟方式。</p>

<p>我们可以用</p>

<pre><code>select name from mysql.proc where db=’数据库名’;
</code></pre>

<p>或者</p>

<pre><code>select routine_name from information_schema.routines where routine_schema='数据库名';
</code></pre>

<p>或者</p>

<pre><code>show procedure status where db='数据库名';
</code></pre>

<p>进行查询。</p>

<p>如果我们想知道，某个存储过程的详细，那我们又该怎么做呢？是不是也可以像操作表一样用describe 表名进行查看呢？</p>

<p>答案是：我们可以查看存储过程的详细，但是需要用另一种方法：</p>

<pre><code>SHOW CREATE PROCEDURE 数据库.存储过程名;
</code></pre>

<p>就可以查看当前存储过程的详细。</p>

<h2>6.MySQL存储过程的修改</h2>

<pre><code>ALTER PROCEDURE
</code></pre>

<p>更改用CREATE PROCEDURE 建立的预先指定的存储过程，其不会影响相关存储过程或存储功能。</p>

<h2>7.MySQL存储过程的删除</h2>

<p>删除一个存储过程比较简单，和删除表一样：</p>

<pre><code>DROP PROCEDURE
</code></pre>

<p>从MySQL的表格中删除一个或多个存储过程。</p>

<h2>8.MySQL存储过程的控制语句</h2>

<h3>(1). 变量作用域</h3>

<p>　　内部的变量在其作用域范围内享有更高的优先权，当执行到end。变量时，内部变量消失，此时已经在其作用域外，变量不再可见了，应为在存储
过程外再也不能找到这个申明的变量，但是你可以通过out参数或者将其值指派
给会话变量来保存其值。</p>

<pre><code>mysql &gt; DELIMITER //  
mysql &gt; CREATE PROCEDURE proc3()  
     -&gt; begin 
     -&gt; declare x1 varchar(5) default 'outer';  
     -&gt; begin 
     -&gt; declare x1 varchar(5) default 'inner';  
     -&gt; select x1;  
     -&gt; end;  
     -&gt; select x1;  
     -&gt; end;  
     -&gt; //  
mysql &gt; DELIMITER ;  
</code></pre>

<h3>(2). 条件语句</h3>

<h4>Ⅰ. if-then -else语句</h4>

<pre><code>mysql &gt; DELIMITER //  
mysql &gt; CREATE PROCEDURE proc2(IN parameter int)  
     -&gt; begin 
     -&gt; declare var int;  
     -&gt; set var=parameter+1;  
     -&gt; if var=0 then 
     -&gt; insert into t values(17);  
     -&gt; end if;  
     -&gt; if parameter=0 then 
     -&gt; update t set s1=s1+1;  
     -&gt; else 
     -&gt; update t set s1=s1+2;  
     -&gt; end if;  
     -&gt; end;  
     -&gt; //  
mysql &gt; DELIMITER ;  
</code></pre>

<h4>Ⅱ. case语句：</h4>

<pre><code>mysql &gt; DELIMITER //  
mysql &gt; CREATE PROCEDURE proc3 (in parameter int)  
     -&gt; begin 
     -&gt; declare var int;  
     -&gt; set var=parameter+1;  
     -&gt; case var  
     -&gt; when 0 then   
     -&gt; insert into t values(17);  
     -&gt; when 1 then   
     -&gt; insert into t values(18);  
     -&gt; else   
     -&gt; insert into t values(19);  
     -&gt; end case;  
     -&gt; end;  
     -&gt; //  
mysql &gt; DELIMITER ; 
</code></pre>

<h3>(3). 循环语句</h3>

<h4>Ⅰ. while ···· end while：</h4>

<pre><code>mysql &gt; DELIMITER //  
mysql &gt; CREATE PROCEDURE proc4()  
     -&gt; begin 
     -&gt; declare var int;  
     -&gt; set var=0;  
     -&gt; while var&lt;6 do  
     -&gt; insert into t values(var);  
     -&gt; set var=var+1;  
     -&gt; end while;  
     -&gt; end;  
     -&gt; //  
mysql &gt; DELIMITER ; 
</code></pre>

<h4>Ⅱ. repeat···· end repeat：</h4>

<p>它在执行操作后检查结果，而while则是执行前进行检查。</p>

<pre><code>mysql &gt; DELIMITER //  
mysql &gt; CREATE PROCEDURE proc5 ()  
     -&gt; begin   
     -&gt; declare v int;  
     -&gt; set v=0;  
     -&gt; repeat  
     -&gt; insert into t values(v);  
     -&gt; set v=v+1;  
     -&gt; until v&gt;=5  
     -&gt; end repeat;  
     -&gt; end;  
     -&gt; //  
mysql &gt; DELIMITER ;  
</code></pre>

<h4>Ⅲ. loop ·····end loop:</h4>

<p>　　loop循环不需要初始条件，这点和while 循环相似，同时和repeat循环一样不需要结束条件, leave语句的意义是离开循环。</p>

<pre><code>mysql &gt; DELIMITER //  
mysql &gt; CREATE PROCEDURE proc6 ()  
     -&gt; begin 
     -&gt; declare v int;  
     -&gt; set v=0;  
     -&gt; LOOP_LABLE:loop  
     -&gt; insert into t values(v);  
     -&gt; set v=v+1;  
     -&gt; if v &gt;=5 then 
     -&gt; leave LOOP_LABLE;  
     -&gt; end if;  
     -&gt; end loop;  
     -&gt; end;  
     -&gt; //  
mysql &gt; DELIMITER ;  
</code></pre>

<h4>Ⅳ. LABLES 标号：</h4>

<p>　　标号可以用在begin repeat while 或者loop 语句前，语句标号只能在合法的语句前面使用。可以跳出循环，使运行指令达到复合语句的最后一步。</p>

<h3>(4). ITERATE迭代</h3>

<h4>Ⅰ. ITERATE:</h4>

<p>　　通过引用复合语句的标号,来从新开始复合语句</p>

<pre><code>mysql &gt; DELIMITER //  
mysql &gt; CREATE PROCEDURE proc10 ()  
     -&gt; begin 
     -&gt; declare v int;  
     -&gt; set v=0;  
     -&gt; LOOP_LABLE:loop  
     -&gt; if v=3 then   
     -&gt; set v=v+1;  
     -&gt; ITERATE LOOP_LABLE;  
     -&gt; end if;  
     -&gt; insert into t values(v);  
     -&gt; set v=v+1;  
     -&gt; if v&gt;=5 then 
     -&gt; leave LOOP_LABLE;  
     -&gt; end if;  
     -&gt; end loop;  
     -&gt; end;  
     -&gt; //  
mysql &gt; DELIMITER ; 
</code></pre>

<h2>10.MySQL存储过程动态表建立(PREPARE)</h2>

<ol>
<li>PREPARE  statement_name  FROM  sql_text /<em>定义</em>/</li>
<li>EXECUTE  statement_name [USING variable [,variable&hellip;]] /<em>执行预处理语句</em>/</li>
<li>DEALLOCATE   PREPARE  statement_name /<em>删除定义</em>/</li>
</ol>


<p>参考示例：</p>

<pre><code>DELIMITER $$
DROP PROCEDURE IF EXISTS `gpsdata`.`sp_test`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_test`(
  gpstime_ varchar(128),
  gpsname_ varchar(128),
  gpsinfo_ varchar(256)
)
BEGIN
DECLARE tbname varchar(50) DEFAULT  '0';
DECLARE v_sql varchar(1024) DEFAULT '0';

SET v_sql=CONCAT('select * from  ', tbname ,' where gpsname = ',gpsname_,'  order by gpstime desc limit 1');


SET @lastdata = v_sql;
PREPARE lastdata FROM @lastdata;   
EXECUTE lastdata;
DEALLOCATE PREPARE lastdata;  

select v_sql;

END$$

DELIMITER ;
</code></pre>

<p>使用 PREPARE 的几个注意点：</p>

<p>　　A： PREPARE stmt_name FROM preparable_stmt;</p>

<p> 预定义一个语句，并将它赋给 stmt_name ，stmt_name 是不区分大小写的。</p>

<p>　　B： 即使 preparable_stmt 语句中的 ? 所代表的是一个字符串，你也不需要将 ? 用引号包含起来。</p>

<p>　　C： 如果新的 PREPARE 语句使用了一个已存在的 stmt_name ，那么原有的将被立即释放！
 即使这个新的 PREPARE 语句因为错误而不能被正确执行。</p>

<p>　　D： PREPARE stmt_name 的作用域是当前客户端连接会话可见。</p>

<p>　　E： 要释放一个预定义语句的资源，可以使用 DEALLOCATE PREPARE 句法。</p>

<p>　　F： EXECUTE stmt_name 句法中，如果 stmt_name 不存在，将会引发一个错误。</p>

<p>　　G： 如果在终止客户端连接会话时，没有显式地调用 DEALLOCATE PREPARE 句法释放资源，服务器端会自己动释放它。</p>

<p>　　H：在预定义语句中，CREATE TABLE, DELETE, DO, INSERT, REPLACE, SELECT, SET, UPDATE, 和大部分的 SHOW 句法被支持。</p>

<p>　　I：PREPARE 语句不可以用于存储过程(5.0以上可以使用)，自定义函数！但从 MySQL 5.0.13 开始，它可以被用于存储过程，仍不支持在函数中使用！</p>

<h2>11.MySQL存储过程动态创建临时表</h2>

<figure class='code'><figcaption><span>案例应用</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="k">drop</span> <span class="k">procedure</span> <span class="k">if</span> <span class="k">exists</span> <span class="n">proc_user_center_message</span><span class="p">;</span>
</span><span class='line'><span class="c1">-- 创建存储过程</span>
</span><span class='line'>
</span><span class='line'><span class="k">drop</span> <span class="k">procedure</span> <span class="k">if</span> <span class="k">exists</span> <span class="n">proc_user_center_message</span><span class="p">;</span>
</span><span class='line'><span class="c1">-- 创建存储过程</span>
</span><span class='line'><span class="k">create</span> <span class="k">procedure</span> <span class="nf">proc_user_center_message</span><span class="p">(</span><span class="k">in</span> <span class="n">userAccount</span> <span class="kt">varchar</span><span class="p">(</span><span class="mi">40</span><span class="p">),</span><span class="k">in</span> <span class="n">investor</span> <span class="kt">int</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span><span class="k">in</span> <span class="n">projectCreator</span> <span class="kt">int</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span><span class="k">in</span> <span class="n">startRecord</span> <span class="kt">int</span><span class="p">(</span><span class="mi">6</span><span class="p">),</span><span class="k">in</span> <span class="n">recordCount</span> <span class="kt">int</span><span class="p">(</span><span class="mi">6</span><span class="p">))</span>
</span><span class='line'><span class="n">begin</span>
</span><span class='line'>  <span class="k">declare</span> <span class="n">dynamic_sql</span> <span class="kt">varchar</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">-- 创建临时表</span>
</span><span class='line'>  <span class="k">drop</span> <span class="n">temporary</span> <span class="k">table</span> <span class="k">if</span> <span class="k">exists</span> <span class="n">tmp_message</span><span class="p">;</span>
</span><span class='line'>  <span class="k">create</span> <span class="n">temporary</span> <span class="k">table</span> <span class="nf">tmp_message</span> <span class="p">(</span>
</span><span class='line'>        <span class="n">id</span> <span class="kt">varchar</span><span class="p">(</span><span class="mi">50</span><span class="p">),</span>
</span><span class='line'>        <span class="n">title</span> <span class="kt">varchar</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="p">,</span>
</span><span class='line'>        <span class="n">content</span> <span class="kt">text</span><span class="p">,</span>
</span><span class='line'>        <span class="n">created_time</span> <span class="kt">timestamp</span><span class="p">,</span>
</span><span class='line'>        <span class="n">type</span> <span class="kt">varchar</span><span class="p">(</span><span class="mi">10</span><span class="p">),</span>
</span><span class='line'>        <span class="n">receiver</span> <span class="kt">varchar</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">-- 运营推送消息</span>
</span><span class='line'>  <span class="kt">set</span> <span class="n">dynamic_sql</span> <span class="o">=</span> <span class="s1">&#39;insert into tmp_message(id,title,content,created_time,type,receiver)</span>
</span><span class='line'><span class="s1"> select t.spe_id as id,t.spe_title as title,t.spe_img as content,t.spe_createtime as created_time,1 as type,t.receive_type as receiver</span>
</span><span class='line'><span class="s1"> from oneZc_special_tem t </span>
</span><span class='line'><span class="s1"> where t.category = 3 and t.receive_type is not null&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">set</span> <span class="o">@</span><span class="n">dynamic_sql</span><span class="o">=</span><span class="n">dynamic_sql</span><span class="p">;</span>
</span><span class='line'>  <span class="n">prepare</span> <span class="n">stmt</span> <span class="k">from</span> <span class="o">@</span><span class="n">dynamic_sql</span><span class="p">;</span>
</span><span class='line'>  <span class="n">execute</span> <span class="n">stmt</span><span class="p">;</span>
</span><span class='line'>  <span class="n">deallocate</span> <span class="n">prepare</span> <span class="n">stmt</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">-- 系统消息</span>
</span><span class='line'>  <span class="kt">set</span> <span class="n">dynamic_sql</span> <span class="o">=</span> <span class="s1">&#39;insert into tmp_message(id,title,content,created_time,type,receiver)</span>
</span><span class='line'><span class="s1"> select message_id as id,null as title,t.message_content as content,t.message_createtime as created_time,t.message_type as type,t.user_account as receiver</span>
</span><span class='line'><span class="s1"> from oneZc_message_tem t</span>
</span><span class='line'><span class="s1"> where message_status = &#39;&#39;1&#39;&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">set</span> <span class="o">@</span><span class="n">dynamic_sql</span><span class="o">=</span><span class="n">dynamic_sql</span><span class="p">;</span>
</span><span class='line'>  <span class="n">prepare</span> <span class="n">stmt</span> <span class="k">from</span> <span class="o">@</span><span class="n">dynamic_sql</span><span class="p">;</span>
</span><span class='line'>  <span class="n">execute</span> <span class="n">stmt</span><span class="p">;</span>
</span><span class='line'>  <span class="n">deallocate</span> <span class="n">prepare</span> <span class="n">stmt</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">-- note</span>
</span><span class='line'>  <span class="kt">set</span> <span class="n">dynamic_sql</span> <span class="o">=</span> <span class="s1">&#39;insert into tmp_message(id,title,content,created_time,type,receiver)</span>
</span><span class='line'><span class="s1"> select id as id,null as title,t.note as content,t.created_time as created_time,4 as type,t.scope as receiver </span>
</span><span class='line'><span class="s1"> from oneZc_note_tem t&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">set</span> <span class="o">@</span><span class="n">dynamic_sql</span><span class="o">=</span><span class="n">dynamic_sql</span><span class="p">;</span>
</span><span class='line'>  <span class="n">prepare</span> <span class="n">stmt</span> <span class="k">from</span> <span class="o">@</span><span class="n">dynamic_sql</span><span class="p">;</span>
</span><span class='line'>  <span class="n">execute</span> <span class="n">stmt</span><span class="p">;</span>
</span><span class='line'>  <span class="n">deallocate</span> <span class="n">prepare</span> <span class="n">stmt</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">-- vote</span>
</span><span class='line'>  <span class="kt">set</span> <span class="n">dynamic_sql</span> <span class="o">=</span> <span class="s1">&#39;insert into tmp_message(id,title,content,created_time,type,receiver)</span>
</span><span class='line'><span class="s1"> select id as id,t.title as title,&#39;&#39;有新的投票事务&#39;&#39; as content,t.created_time as created_time,2 as type,</span>
</span><span class='line'><span class="s1"> (select GROUP_CONCAT(distinct ts.user_account separator &#39;&#39;,&#39;&#39;) from zc_investment ts where ts.pro_id = t.project_id and ts.inv_state = 1) as receiver</span>
</span><span class='line'><span class="s1"> from oneZc_vote_tem t&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">set</span> <span class="o">@</span><span class="n">dynamic_sql</span><span class="o">=</span><span class="n">dynamic_sql</span><span class="p">;</span>
</span><span class='line'>  <span class="n">prepare</span> <span class="n">stmt</span> <span class="k">from</span> <span class="o">@</span><span class="n">dynamic_sql</span><span class="p">;</span>
</span><span class='line'>  <span class="n">execute</span> <span class="n">stmt</span><span class="p">;</span>
</span><span class='line'>  <span class="n">deallocate</span> <span class="n">prepare</span> <span class="n">stmt</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">set</span> <span class="n">dynamic_sql</span><span class="o">=</span> <span class="s1">&#39;select id,title,content,created_time,type from tmp_message where (receiver = &#39;&#39;ALL_USER&#39;&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">IF</span> <span class="n">investor</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">THEN</span>
</span><span class='line'>      <span class="kt">set</span> <span class="n">dynamic_sql</span> <span class="o">=</span> <span class="nf">concat</span><span class="p">(</span><span class="n">dynamic_sql</span><span class="p">,</span><span class="s1">&#39; or receiver = &#39;&#39;INVESTOR&#39;&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">END</span> <span class="k">IF</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">IF</span> <span class="n">projectCreator</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">THEN</span>
</span><span class='line'>      <span class="kt">set</span> <span class="n">dynamic_sql</span> <span class="o">=</span> <span class="nf">concat</span><span class="p">(</span><span class="n">dynamic_sql</span><span class="p">,</span><span class="s1">&#39; or receiver = &#39;&#39;PROJECT_CREATOR&#39;&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">END</span> <span class="k">IF</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">IF</span> <span class="n">userAccount</span> <span class="k">is</span> <span class="k">not</span> <span class="no">null</span>
</span><span class='line'>  <span class="k">THEN</span>
</span><span class='line'>      <span class="kt">set</span> <span class="n">dynamic_sql</span> <span class="o">=</span> <span class="nf">concat</span><span class="p">(</span><span class="n">dynamic_sql</span><span class="p">,</span><span class="s1">&#39; or receiver like &#39;&#39;%&#39;</span><span class="p">,</span><span class="n">userAccount</span><span class="p">,</span><span class="s1">&#39;%&#39;&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">END</span> <span class="k">IF</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">set</span> <span class="n">dynamic_sql</span> <span class="o">=</span> <span class="nf">concat</span><span class="p">(</span><span class="n">dynamic_sql</span><span class="p">,</span><span class="s1">&#39;)&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">set</span> <span class="n">dynamic_sql</span> <span class="o">=</span> <span class="nf">concat</span><span class="p">(</span><span class="n">dynamic_sql</span><span class="p">,</span><span class="s1">&#39; order by created_time desc&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">IF</span> <span class="n">startRecord</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">recordCount</span> <span class="o">&gt;=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">THEN</span>
</span><span class='line'>      <span class="kt">set</span> <span class="n">dynamic_sql</span> <span class="o">=</span> <span class="nf">concat</span><span class="p">(</span><span class="n">dynamic_sql</span><span class="p">,</span><span class="s1">&#39; limit &#39;</span><span class="p">,</span><span class="n">startRecord</span><span class="p">,</span><span class="s1">&#39;,&#39;</span><span class="p">,</span><span class="n">recordCount</span><span class="p">);</span>
</span><span class='line'>  <span class="n">END</span> <span class="k">IF</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">set</span> <span class="o">@</span><span class="n">dynamic_sql</span><span class="o">=</span><span class="n">dynamic_sql</span><span class="p">;</span>
</span><span class='line'>  <span class="n">prepare</span> <span class="n">stmt</span> <span class="k">from</span> <span class="o">@</span><span class="n">dynamic_sql</span><span class="p">;</span>
</span><span class='line'>  <span class="n">execute</span> <span class="n">stmt</span><span class="p">;</span>
</span><span class='line'>  <span class="n">deallocate</span> <span class="n">prepare</span> <span class="n">stmt</span><span class="p">;</span>    
</span><span class='line'>
</span><span class='line'><span class="n">end</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用Chocolatey快速在Windows下搭建一个开发环境]]></title>
    <link href="http://swmwlm.github.io/blog/2015/12/18/chocolatey/"/>
    <updated>2015-12-18T15:28:58+08:00</updated>
    <id>http://swmwlm.github.io/blog/2015/12/18/chocolatey</id>
    <content type="html"><![CDATA[<p>在 Linux 下，可以使用 apt-get或者yum 来安装应用程序，在 windows 下，现在可以使用 Chocolatey 来载搭建一个开发环境。</p>

<!--more-->


<p>Chocolatey NuGet is a Machine Package Manager, somewhat like apt-get, but built with Windows in mind.</p>

<p>注： Chocolatey 只是把官方下载路径封装到了 Chocolatey 中，所以下载源都是其官方路径，所以下载的一定是合法的，但是如果原软件是需要 Licence 注册的话，那么 Chocolatey 下载安装好的软件还是需要你去购买注册。不过 Chocolatey 一般还是会选用免费 Licence 可用的软件。</p>

<p><strong>如何安装</strong>： 具体参见 <a href="https://chocolatey.org/">Chocolatey主页</a> ，就现在 （2015-12-18） 的安装方式如下：</p>

<pre><code>@powershell -NoProfile -ExecutionPolicy Bypass -Command "iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))" &amp;&amp; SET PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin
</code></pre>

<p>安装软命令 choco install, 短写是 cinst</p>

<p>可安装的应用程序，可以参见其 <a href="https://chocolatey.org/packages">Package 列表</a></p>

<p>安装 git</p>

<pre><code>choco install git.install 
</code></pre>

<p>安装 node</p>

<pre><code>choco install nodejs.install 
</code></pre>

<p>安装 Microsoft Visual C++ 2010 Redistributable Package</p>

<pre><code>choco install nodejs.install 
</code></pre>

<p>安装 vagrant</p>

<pre><code>choco install vagrant
</code></pre>

<p>安装 virtual box</p>

<pre><code>choco install virtualbox 
</code></pre>

<p>安装编辑器 notepad++/atom/sublime （另外还有各种IDE，不列出了）</p>

<pre><code>choco install notepadplusplus.install
choco install Atom
choco install SublimeText3 
</code></pre>

<p>安装 Ruby</p>

<pre><code>choco install ruby
</code></pre>

<p>安装 Python</p>

<pre><code>choco install python
</code></pre>

<p>另外，如果要搭建一个本地的CI系统，可以下载Java环境和Jenkins</p>

<p>安装 Java JDK7 或 JDK8</p>

<pre><code>choco install jdk7 
</code></pre>

<p>或</p>

<pre><code>choco install jdk8 
</code></pre>

<p>安装 Jenkins</p>

<pre><code>choco install jenkins 
</code></pre>

<p>这样基本上就可以建立一个强大开发环境了，包含了基本上所有的命令行语言运行环境，构建依赖库，Vagrant， 编辑器， virtual box 以及一个 强大 CI 系统。 其他应用可以根据自己需要从 Package 列表中寻找。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git命令]]></title>
    <link href="http://swmwlm.github.io/blog/2015/12/17/git/"/>
    <updated>2015-12-17T15:28:58+08:00</updated>
    <id>http://swmwlm.github.io/blog/2015/12/17/git</id>
    <content type="html"><![CDATA[<p>在使用Git时，经常需要查询的命令。</p>

<!--more-->


<p>1.设置
设置邮箱和用户名</p>

<pre><code>git config --global user.email "xu.jin.smile@gmail.com"
git config --global user.name "GinSmile"
</code></pre>

<p>生成SSH Key</p>

<pre><code>ssh-keygen -t rsa -C "example@163.com"
</code></pre>

<p>创建</p>

<p>初始化本地库</p>

<pre><code>git init
</code></pre>

<p>克隆远程版本库</p>

<pre><code>git clone git@github.com:GinSmile/Algorithms.git
</code></pre>

<p>添加远程分支(添加Algorithm项目的dev分支到本地)</p>

<pre><code>git remote add dev git@github.com:GinSmile/Algorithms.git
</code></pre>

<p>查看远程分支</p>

<pre><code>git remote -v
</code></pre>

<p>提交</p>

<pre><code>git add .
git commit -m "some comment"
</code></pre>

<p>更改上次提交的comment注释</p>

<pre><code>git commit -amend "new comment"
</code></pre>

<p>查看状态，即查看那些文章被修改了</p>

<pre><code>git status
</code></pre>

<p>查看提交的历史记录</p>

<pre><code>git log
</code></pre>

<p>删除</p>

<p>从当前跟踪列表中移除文件，并完全删除</p>

<pre><code>git rm Readme.md
</code></pre>

<p>仅仅在暂存区删除，不再跟踪该文件，并在目录中保留</p>

<pre><code>git rm --cached Readme.md
</code></pre>

<p>分支</p>

<p>创建一个名为dev的分支</p>

<pre><code>git branch dev
</code></pre>

<p>切换到dev分支</p>

<pre><code>git checkout dev
</code></pre>

<p>创建并切换到dev分支（等同于以上两个命令）</p>

<pre><code>git checkout -b dev
</code></pre>

<p>合并</p>

<p>从远程库中拉去最新文件，并自动合并</p>

<pre><code>git pull
</code></pre>

<p>合并分支（当前分支为master，要合并dev的更改）</p>

<pre><code>git merge dev
</code></pre>

<p>忽略
即.gitignore文件，可忽略文件夹和文件 忽略文件夹</p>

<pre><code>bin
</code></pre>

<p>忽略文件</p>

<pre><code>*.c
</code></pre>

<p>互联网有一张特别棒的Git命令思维导图，特拿来分享，感谢原作者:</p>

<!-- -*- html -*- -->
<a href='http://swmwlm.github.io/images/git/git-operate.png' style="text-decoration: none" id="image-1"><img src="http://swmwlm.github.io/images/git/resized_git-operate.png" alt="Click me." class="center"/></a>
  <div id="image-dialog-1" style="display:none; overflow:hidden;" class="noTitle">
    <div class="image-caption" align="center">
      <div class="capt-left">棒棒的Git.</div>
      <div class="capt-right">
        <a href="http://swmwlm.github.io/images/git/git-operate.png">permalink</a>
      </div>
    </div>
    <div id="proxy1" align="center" class="proxy-container">
      <img class="image-drag" src="http://swmwlm.github.io/images/logo.jpg" id="full_image-1" />
    </div>
  </div>
  <script type="text/javascript">
    jQuery(document).ready(function() {
        jQuery.imgpop({
          id: "1",
          full_image: "/images/git/git-operate.png",
          full_width: 1759,
          full_height: 3162,
          title: "棒棒的Git."
        });
    });
  </script>


]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux下新增修改删除查看用户和用户组]]></title>
    <link href="http://swmwlm.github.io/blog/2015/12/12/linuxgroup/"/>
    <updated>2015-12-12T12:28:58+08:00</updated>
    <id>http://swmwlm.github.io/blog/2015/12/12/linuxgroup</id>
    <content type="html"><![CDATA[<p>linux下添加，删除，修改，查看用户和用户组</p>

<!--more-->


<p>1：创建组
groupadd test</p>

<p>2：修改组，将test1组改为test2
groupmod -n test2 test1</p>

<p>3，删除组
groupdel test2</p>

<p>4，查看组</p>

<p>a，查看当前登录用户所在的组groups。
查看mysql所在组:groups mysql</p>

<p>b，查看所有组cat /etc/group</p>

<p>c，有的linux系统没有/etc/group文件，使用下面命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat /etc/passwd |awk -F : '{print $4}' |sort|uniq | getent group |awk -F : '{print $1}'</span></code></pre></td></tr></table></div></figure>


<p>其中，命令getent,</p>

<p>可以通过组ID来查找组信息，例如：getent group mysql</p>

<p>二，用户操作</p>

<p>1，增加用户</p>

<p>useradd –-help</p>

<p>2，修改用户
usermod –-help
gpasswd –-help
例如,修改test用户，更改家目录/home/test,并加入test2组：
usermod -d /home/test -G test2 test</p>

<p>将用户test加入到test2组
gpasswd -a test test2</p>

<p>将用户test从test2组中移出
gpasswd -d test test2</p>

<p>3，删除用户
userdel test</p>

<p>4，查看用户</p>

<p>a，查看当前登录用户</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@www ~]# w 
</span><span class='line'>[root@www ~]# who </span></code></pre></td></tr></table></div></figure>


<p>b，查看自己的用户名
[root@www ~]# whoami</p>

<p>c，查看单个用户信息</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@www ~]# finger apacheuser 
</span><span class='line'>[root@www ~]# id apacheuser </span></code></pre></td></tr></table></div></figure>


<p>d，查看用户登录记录</p>

<p>[root@www ~]# last 查看登录成功的用户记录
[root@www ~]# lastb 查看登录不成功的用户记录</p>

<p>e，查看所有用户</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@www ~]# cut -d : -f 1 /etc/passwd 
</span><span class='line'>[root@www ~]# cat /etc/passwd |awk -F : '{print $1}'</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress写博客常用加入代码、图片、带标题图片方法]]></title>
    <link href="http://swmwlm.github.io/blog/2015/11/29/octopressImage/"/>
    <updated>2015-11-29T19:04:58+08:00</updated>
    <id>http://swmwlm.github.io/blog/2015/11/29/octopressImage</id>
    <content type="html"><![CDATA[<p>用Octopress写博客时，经常使用的方法，用以插入代码片段、图片：</p>

<!--more-->


<blockquote><p><a href="http://wowubuntu.com/markdown/#autoescape">请参考MarkDown文档</a></p></blockquote>

<p>1：插入代码[language] [title] [url] [link text]</p>

<figure class='code'><figcaption><span>Hello World</span><a href='http://baidu.com'>更多</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hello World&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>title url link text </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">code</span> <span class="n">snippet</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>注意：当上面方式报错时，需要Pygments安装</p></blockquote>

<pre><code>安装 Python
    1.前往 http://www.python.org/download/
    2.下载合适的 Python windows 安装包，如 Python 2.7.6 Windows Installer。 请注意，Python 2 可能会更合适，因为暂时 Python 3 可能不会正常工作。
    3.安装
    4.添加安装路径 (如： C:\Python27) 至 PATH。(如何操作? 请参见 故障诊断 #1)
    5.检验 Python 安装是否成功
    python –V
    输出示例：
    Python 2.7.6

安装 ‘Easy Install’
    1.浏览https://pypi.python.org/pypi/setuptools#installation-instructions来查看详细的安装指南。
    2.对于 Windows 7 的机器，下载 ez_setup.py 并保存，例如，至C:\。 然后从命令行使用 Python 运行此文件：
    python “C:\ez_setup.py”
    3.添加 ‘Python Scripts’ 路径 (如： C:\Python27\Scripts) 至 PATH

安装 Pygments
    1.确保 easy_install 已经正确安装
    easy_install --version
    输出示例：
    setuptools 3.1
    2.使用 “easy_install” 来安装 Pygments:
    easy_install Pygments
</code></pre>

<p>2：增加引用</p>

<blockquote><p>引用</p></blockquote>

<p>3：增加链接
<a href="http://www.baidu.com/">测试链接</a></p>

<p>4.图片
<img src="http://www.mincoder.com/images/201442/rUCWqfipDv3U7zYH.png" alt="图片属性" /></p>

<p>博客中引用图片
在路径D:\octopress\source\images里面保存对应的图像，在文章中引用
{ % img /images/email.png % },注意，去除{ % 中间的空格</p>

<blockquote><p>4.1.imagepop plugin
这是一个添加图片的插件，可以按照比例缩放图片，点击图片可以查看原图，项目地址在<a href="https://bitbucket.org/fudanchii/imgpop/src/2fc043b1713e5de401edb0eea8639502bcc250a8?at=default">imgpop</a>
这里重复一下安装过程：
在octopress/Gemfile中添加以下代码，就可以得到相应依赖：</p></blockquote>

<pre><code>gem 'erubis'
gem 'mini_magick'

运行bundle install,安装相应依赖 将开源项目中的_style.scss中的内容添加到octopress/sass/custom/_styles.scss中 
将开源项目中plugins中的两个文件复制octopress/plugins文件夹下 
将开源项目中的imgpop.js文件复制octopress/source/javascripts文件夹下 
文件引用图片的方式为：{ % imgpop /images/awesomeimage.jpg 50% center Awesome image taken hundred years ago. % }，去除{ %之间的空格。
过程中出现的问题记录：
***利用Chocolatey 安装imagemagick ，命令为：choco install imagemagick 
***修改img_popup.rb中的safe_wrap(@template.result(vars))为TemplateWrapper.safe_wrap(@template.result(vars))
***如果jquery版本比较高，需要修改jquery.live方法为jquery.on
</code></pre>

<p>5.视频
<video width='640' height='320' preload='metadata' controls poster='http://www.mincoder.com/images/201442/rUCWqfipDv3U7zYH.png'><source src='http://static-jkxy.qiniudn.com/event/jkxy_profile20150318.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'></video></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows查看端口占用以及关闭相应的进程]]></title>
    <link href="http://swmwlm.github.io/blog/2015/11/26/projectmanagementtools2/"/>
    <updated>2015-11-26T22:40:49+08:00</updated>
    <id>http://swmwlm.github.io/blog/2015/11/26/projectmanagementtools2</id>
    <content type="html"><![CDATA[<p>进入命令提示符 输入netstat -ano 即可看到所有连接的PID 之后在任务管理器中找到这个PID所对应的程序如果任务管理器中没有PID这一项,可以在任务管理器中选"查看"-&ldquo;选择列&rdquo;</p>

<p>经常，我们在启动应用的时候发现系统需要的端口被别的程序占用，如何知道谁占有了我们需要的端口，很多人都比较头疼，下面就介绍一种非常简单的方法，希望对大家有用</p>

<!--more-->


<p>假如我们需要确定谁占用了我们的9050端口
1、Windows平台
在windows命令行窗口下执行：
1.查看所有的端口占用情况</p>

<p>C:>netstat -ano</p>

<p>  协议    本地地址                     外部地址               状态                   PID</p>

<p>  TCP    127.0.0.1:1434         0.0.0.0:0              LISTENING       3236
  TCP    127.0.0.1:5679         0.0.0.0:0              LISTENING       4168
  TCP    127.0.0.1:7438         0.0.0.0:0              LISTENING       4168
  TCP    127.0.0.1:8015         0.0.0.0:0              LISTENING       1456
  TCP    192.168.3.230:139      0.0.0.0:0              LISTENING       4
  TCP    192.168.3.230:1957     220.181.31.225:443     ESTABLISHED     3068
  TCP    192.168.3.230:2020     183.62.96.189:1522     ESTABLISHED     1456
  TCP    192.168.3.230:2927     117.79.91.18:80        ESTABLISHED     4732
  TCP    192.168.3.230:2929     117.79.91.18:80        ESTABLISHED     4732
  TCP    192.168.3.230:2930     117.79.91.18:80        ESTABLISHED     4732
  TCP    192.168.3.230:2931     117.79.91.18:80        ESTABLISHED     4732</p>

<p>2.查看指定端口的占用情况
C:>netstat -aon|findstr &ldquo;9050&rdquo;</p>

<p>  协议    本地地址                     外部地址               状态                   PID</p>

<p>  TCP    127.0.0.1:9050         0.0.0.0:0              LISTENING       2016</p>

<p>P: 看到了吗，端口被进程号为2016的进程占用，继续执行下面命令： （也可以去任务管理器中查看pid对应的进程）</p>

<p>3.查看PID对应的进程
C:>tasklist|findstr &ldquo;2016&rdquo;</p>

<p> 映像名称                       PID 会话名              会话#       内存使用
 ========================= ======== ================
  tor.exe                     2016 Console                 0     16,064 K</p>

<p>P:很清楚吧，tor占用了你的端口。</p>

<p>4.结束该进程</p>

<p>C:>taskkill /f /t /im tor.exe</p>

<blockquote><p>参考文档:<a href="http://www.cnblogs.com/moodlxs/p/4145384.html" title="参考文档">http://www.cnblogs.com/moodlxs/p/4145384.html</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intellij IDEA自动编译不用每次make]]></title>
    <link href="http://swmwlm.github.io/blog/2015/11/26/idea/"/>
    <updated>2015-11-26T16:04:58+08:00</updated>
    <id>http://swmwlm.github.io/blog/2015/11/26/idea</id>
    <content type="html"><![CDATA[<p>最近使用IDEA来开发JAVA应用，对IDEA的界面很有爱，但是缺受不了它的运行速度。每次运行都要编译，所以就有了这边文章
总感觉IDEA的编译速度比eclipse慢，eclipse每次保存都自动编译，而且运行的时候如果代码没有改变根本不会重新编译，但是IDEA这方便却不是，每次都要编译。通过google和自己的测试解决了这个问题。</p>

<!--more-->


<p>1：开启自动测试
File->setting->compiler
<img src="http://www.mincoder.com/images/201442/1oWXVOqCUeWWbu2w.png" alt="idea" />
勾选上上面的，</p>

<p>2修改run/debug配置
Run->Edit Configurations</p>

<p><img src="http://www.mincoder.com/images/201442/rUCWqfipDv3U7zYH.png" alt="idea" />
看图 在Before Launch下面的make去掉了。到了这里还要做一件事情，执行File->Invalidate Caches /Restart</p>

<p>到这里IDEA配置好了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux安装jira6.3.6,安装破解以及数据导入的详细步骤]]></title>
    <link href="http://swmwlm.github.io/blog/2015/11/21/projectmanagementtools/"/>
    <updated>2015-11-21T18:42:49+08:00</updated>
    <id>http://swmwlm.github.io/blog/2015/11/21/projectmanagementtools</id>
    <content type="html"><![CDATA[<p>序言：</p>

<p>JIRA 是澳大利亚 Atlassian 公司开发的一款优秀的问题跟踪管理软件工具，可以对各种类型的问题进行跟踪管理，包括缺陷、任务、需求、改进等。JIRA采用J2EE技术，能够跨平台部署。它正被广泛的开源软件组织，以及全球著名的公司使用。</p>

<p> <!--more--></p>

<p>JIRA产品非常完善且功能强大，安装配置简单，多语言支持、界面十分友好，和其他系统如CVS、Subversion（SVN）、VSS、LDAP、邮件服务整合得相当好，文档齐全，可用性以及可扩展性方面都十分出色，拥有完整的用户权限管理。</p>

<p>环境：jira软件，192.xx8.171.xx0；jira数据库，192.xx8.171.xx2。
1，下载</p>

<p>官网下载地址：<a href="https://www.atlassian.com/software/jira/download%EF%BC%8C%E5%8F%AA%E7%9C%8B%E5%88%B0window%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85%E7%89%88%E6%9C%AC%EF%BC%8C%E8%BF%99%E4%B8%AA%E6%97%B6%E5%80%99%E9%9C%80%E8%A6%81%E7%82%B9%E5%87%BB?">https://www.atlassian.com/software/jira/download%EF%BC%8C%E5%8F%AA%E7%9C%8B%E5%88%B0window%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85%E7%89%88%E6%9C%AC%EF%BC%8C%E8%BF%99%E4%B8%AA%E6%97%B6%E5%80%99%E9%9C%80%E8%A6%81%E7%82%B9%E5%87%BB?</a> All JIRA download options选项，打开linux下载页面栏选项，选择JIRA 6.3.6 (TAR.GZ Archive)进行下载。wget <a href="http://www.atlassian.com/software/jira/downloads/binary/atlassian-jira-6.3.6.tar.gz%EF%BC%8C%E4%B8%8D%E8%BF%87%E4%B8%8B%E6%AF%94%E8%BE%83%E7%BC%93%E6%85%A2%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%8E%BB%E6%88%91%E7%9A%84%E7%99%BE%E5%BA%A6%E4%BA%91%E7%BD%91%E7%9B%98%E5%9C%B0%E5%9D%80http://pan.baidu.com/s/1eQgTYKE%E4%B8%8B%E8%BD%BD%E3%80%82">http://www.atlassian.com/software/jira/downloads/binary/atlassian-jira-6.3.6.tar.gz%EF%BC%8C%E4%B8%8D%E8%BF%87%E4%B8%8B%E6%AF%94%E8%BE%83%E7%BC%93%E6%85%A2%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%8E%BB%E6%88%91%E7%9A%84%E7%99%BE%E5%BA%A6%E4%BA%91%E7%BD%91%E7%9B%98%E5%9C%B0%E5%9D%80http://pan.baidu.com/s/1eQgTYKE%E4%B8%8B%E8%BD%BD%E3%80%82</a>
2，安装
2.1，安装jdk环境</p>

<p>Linux下安装tomcat环境，参考：<a href="http://blog.csdn.net/mchdba/article/details/23769731">http://blog.csdn.net/mchdba/article/details/23769731</a></p>

<p>Linux下安装jdk环境，参考：<a href="http://blog.csdn.net/mchdba/article/details/38768513">http://blog.csdn.net/mchdba/article/details/38768513</a></p>

<p>2.2，建立目录</p>

<p> mkdir –p /home/jira</p>

<p> mv /root/atlassian-jira-6.3.6.tar.gz ./</p>

<p>2.3，解压缩安装</p>

<p> tar -xvf atlassian-jira-6.3.6.tar.gz</p>

<p> cd atlassian-jira-6.3.6-standalone</p>

<p> 因为8080端口已经被占用了，所以启动jira的时候会报错，找到server.xml，需要把默认的8080端口改成8081，大概在文件的第49行附件，修改方法如下：</p>

<h1>先看下8081端口是否被占用</h1>

<p>[root@name01 conf]# lsof -i:8081</p>

<p>[root@name01 conf]#</p>

<p>[root@name01 conf]# vim /home/jira/atlassian-jira-6.3.6-standalone/conf/server.xml</p>

<h1>，</h1>

<p>[root@name01 conf]# more server.xml |grep 8080</p>

<p>[root@name01 conf]# more server.xml |grep 8081</p>

<p>[root@name01 conf]#</p>

<p>配置jira_home</p>

<p>vim /home/jira/atlassian-jira-6.3.6-standalone/atlassian-jira/WEB-INF/classes/jira-application.properties</p>

<p>jira.home = /home/jira_home
2.4，启动jira</p>

<p>[root@name01 bin]# /home/jira/atlassian-jira-6.3.6-standalone/bin/start-jira.sh</p>

<p>To run JIRA in the foreground, start the server with start-jira.sh -fg</p>

<p>……</p>

<p>Server startup logs are located in /home/jira/atlassian-jira-6.3.6-standalone/logs/catalina.out</p>

<p>Using CATALINA_BASE:   /home/jira/atlassian-jira-6.3.6-standalone</p>

<p>Using CATALINA_HOME:   /home/jira/atlassian-jira-6.3.6-standalone</p>

<p>Using CATALINA_TMPDIR: /home/jira/atlassian-jira-6.3.6-standalone/temp</p>

<p>Using JRE_HOME:        /usr/lib/jvm/jdk1.6.0_35/jre</p>

<p>Using CLASSPATH:       /home/jira/atlassian-jira-6.3.6-standalone/bin/bootstrap.jar:/home/jira/atlassian-jira-6.3.6-standalone/bin/tomcat-juli.jar</p>

<p>Using CATALINA_PID:    /home/jira/atlassian-jira-6.3.6-standalone/work/catalina.pid</p>

<p>Tomcat started.</p>

<p>[root@name01 bin]#</p>

<p>看到jira所在的Tomcat容器 已经启动成功。</p>

<p>打开网址<a href="http://192.xx8.171.xxx:8081/%EF%BC%8C%E5%90%8E%E5%8F%B0tomcat%E6%97%A5%E5%BF%97%E6%8A%A5%E9%94%99%E5%A6%82%E4%B8%8B%EF%BC%9A">http://192.xx8.171.xxx:8081/%EF%BC%8C%E5%90%8E%E5%8F%B0tomcat%E6%97%A5%E5%BF%97%E6%8A%A5%E9%94%99%E5%A6%82%E4%B8%8B%EF%BC%9A</a></p>

<p>2014-9-17 18:46:02 org.apache.catalina.core.StandardServer await</p>

<p>严重: StandardServer.await: create[localhost:8005]:</p>

<p>java.net.BindException: Address already in use</p>

<pre><code>   at java.net.PlainSocketImpl.socketBind(Native Method)

   at java.net.PlainSocketImpl.bind(PlainSocketImpl.java:383)

   at java.net.ServerSocket.bind(ServerSocket.java:328)

   at java.net.ServerSocket.(ServerSocket.java:194)

   at org.apache.catalina.core.StandardServer.await(StandardServer.java:427)

   at org.apache.catalina.startup.Catalina.await(Catalina.java:777)

   at org.apache.catalina.startup.Catalina.start(Catalina.java:723)

   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

   at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)

   at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)

   at java.lang.reflect.Method.invoke(Method.java:597)

   at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:321)

   at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:455)
</code></pre>

<p>2014-9-17 18:46:02 org.apache.coyote.AbstractProtocol pause</p>

<p>页面报错信息如下：</p>

<p>JIRA Startup Failed</p>

<p>Configured jira.home &lsquo;/home/jira/atlassian-jira-6.3.6-standalone&rsquo; must not be a parent directory of the webapp servlet path &lsquo;/home/jira/atlassian-jira-6.3.6-standalone/atlassian-jira&rsquo;</p>

<hr />

<p>Configured jira.home &lsquo;/home/jira/atlassian-jira-6.3.6-standalone&rsquo; must not be a parent directory of the webapp servlet path &lsquo;/home/jira/atlassian-jira-6.3.6-standalone/atlassian-jira&rsquo;</p>

<p>重新设置一下jira.home，设置成不在本jira安装软件目录下，然后重启jira服务，打开jira网址，OK了，可以看到页面如下：</p>

<p>3，汉化</p>

<p>汉化包下载地址为：<a href="http://download.csdn.net/detail/mchdba/7941381%EF%BC%8C%E5%B0%86JIRA-Language-STD-CN.jar%E6%B1%89%E5%8C%96%E5%8C%85copy%E5%88%B0linux%E7%9A%84jira%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95">http://download.csdn.net/detail/mchdba/7941381%EF%BC%8C%E5%B0%86JIRA-Language-STD-CN.jar%E6%B1%89%E5%8C%96%E5%8C%85copy%E5%88%B0linux%E7%9A%84jira%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95</a> ，启动的时候注意jdk版本为jdk1.6系列，/home/jira/atlassian-jira-6.3.6-standalone/atlassian-jira/WEB-INF/lib下面，之后重启jira服务</p>

<p>/home/jira/atlassian-jira-6.3.6-standalone/bin/shutdown.sh</p>

<p>/home/jira/atlassian-jira-6.3.6-standalone/bin/start-jira.sh</p>

<p>再打开<a href="http://192.168.171.230:8081/secure/SetupDatabase!default.jspa%EF%BC%8C%E5%B0%B1%E4%BC%9A%E7%9C%8B%E5%88%B0%E5%A6%82%E4%B8%8B%E6%B1%89%E5%8C%96%E7%95%8C%E9%9D%A2%EF%BC%9A">http://192.168.171.230:8081/secure/SetupDatabase!default.jspa%EF%BC%8C%E5%B0%B1%E4%BC%9A%E7%9C%8B%E5%88%B0%E5%A6%82%E4%B8%8B%E6%B1%89%E5%8C%96%E7%95%8C%E9%9D%A2%EF%BC%9A</a></p>

<p>4，jira配置</p>

<p>先建立jira数据库以及账号密码：
mysql> CREATE DATABASE <code>jira636</code> /<em>!40100 DEFAULT CHARACTER SET utf8</em>/;</p>

<p>Query OK, 1 row affected (0.13 sec)</p>

<p>mysql> GRANT ALL ON jira636.* TO jira_user@&lsquo;%&rsquo; IDENTIFIED BY &lsquo;jira_user0919&rsquo;;</p>

<p>Query OK, 0 rows affected (0.38 sec)</p>

<p>mysql></p>

<p>在界面配置好数据库连接信息，然后点击“下一”按钮，如下图所示：</p>

<p>如果报错，找不到类: com.mysql.jdbc.Driver</p>

<p>需要将jdbc驱动包mysql-connector-java-5.1.25-bin.jar复制到/home/jira/atlassian-jira-6.3.6-standalone/atlassian-jira/WEB-INF/lib目录下面，然后重启，有报错信息如下：</p>

<p>JIRA Startup Failed</p>

<p>org.ofbiz.core.entity.GenericDataSourceException: SQL Exception while executing the following:SELECT pluginkey, pluginenabled FROM pluginstate (Table &lsquo;jira636.pluginstate&rsquo; doesn&rsquo;t exist)</p>

<p>解决办法：删除数据库配置文件dbconfig.xml，然后重新启动jira，重新配置</p>

<p>PS：汉化后报错，是因为汉化版本有问题，将JIRA-Language-STD-CN.jar汉化包换成JIRA-6.3.3-language-pack-zh_CN.jar新的汉化包下载地址为：</p>

<p><a href="http://download.csdn.net/download/mchdba/7943421%EF%BC%8C%E5%85%88%E9%85%8D%E7%BD%AEDB%EF%BC%8C%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA%EF%BC%9A">http://download.csdn.net/download/mchdba/7943421%EF%BC%8C%E5%85%88%E9%85%8D%E7%BD%AEDB%EF%BC%8C%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA%EF%BC%9A</a></p>

<p>配置完数据库之后，在新界面录入程序标题，点击“向后”按钮</p>

<p>输入临时授权码，进行注册：</p>

<p>注册完之后，填写管理员账户和密码</p>

<p>之后配置邮件服务器，点击“完成”按钮，如下所示，</p>

<p>之后，JIRA安装正式完成，如下自动跳转到JIRA管理页面，如下所示：</p>

<p>5，破解授权</p>

<p>点击右上角齿轮形状的管理图标，选择“系统”，再选择“授权”，看到使用日期不到1个月，如下所示：</p>

<p>将附件中的atlassian-extras-2.2.2.jar替换你的JIRA的安装目录的\atlassian-jira\WEB-INF\lib同名jar包，破解包下载地址为：<a href="http://download.csdn.net/detail/mchdba/7950429%E3%80%82">http://download.csdn.net/detail/mchdba/7950429%E3%80%82</a></p>

<p>填写授权码，授权码参数范例如下：</p>

<p>Description=JIRA: Commercial,</p>

<p>CreationDate=你的安装日期，格式（yyyy-mm-dd）,</p>

<p>jira.LicenseEdition=ENTERPRISE,</p>

<p>Evaluation=false,</p>

<p>jira.LicenseTypeName=COMMERCIAL,</p>

<p>jira.active=true,</p>

<p>licenseVersion=2,</p>

<p>MaintenanceExpiryDate=你想设置的失效日期如：2099-12-31,</p>

<p>Organisation=joiandjoin,</p>

<p>SEN=你申请到的SEN注意没有前缀LID,</p>

<p>ServerID=你申请到的ServerID,</p>

<p>jira.NumberOfUsers=-1,</p>

<p>LicenseID=LID你申请到的SEN，注意LID前缀不要丢掉,</p>

<p>LicenseExpiryDate=你想设置的失效日期如：2099-12-31,</p>

<p>PurchaseDate=你的安装日期，格式（yyyy-mm-dd）</p>

<p>本次安装授权码实例为：</p>

<p>Description=JIRA: Commercial,</p>

<p>CreationDate=2014-09-20,</p>

<p>jira.LicenseEdition=ENTERPRISE,</p>

<p>Evaluation=false,</p>

<p>jira.LicenseTypeName=COMMERCIAL,</p>

<p>jira.active=true,</p>

<p>licenseVersion=2,</p>

<p>MaintenanceExpiryDate=2099-12-31,</p>

<p>Organisation=pl,</p>

<p>SEN=SEN-L4572887,</p>

<p>ServerID=BPT3-4QRK-FCRR-HEP3,</p>

<p>jira.NumberOfUsers=-1,</p>

<p>LicenseID=AAABBw0ODAoPeNptkFtLxDAQhd/zKwI+R9Kwy66FPKxthGhvtF0p4kuso0a6sUwvuP/edissyj4MD</p>

<p>HPOfHOYqzu0tICWeoJy4a+FzzkNwpIK7q1ICF2Ntu3tl5P3Ot89+1SNphnMPCEBwqkJTQ9y9jN+w</p>

<p>zxBPi2a68jW4DpQr/a0rZJS5VmuC0XOBNnjAH/s5bGFxBxABmkcqzzQu2jRTd3bEZaFZvE+AnYzR</p>

<p>JDYWNeDM64G9d1aPJ4TeXxOlOK7cbZbjrbNgkyGwwtg+rbvJpBkHikAR0Adytt0XzFV7R5Y+qQzV</p>

<p>kWZIoVK5FQsWq03YrvdkN/Ekz3S4SXlcpRswPrDdPD/aT+P1nzDMC0CFQCM9+0LlHVNnZQnSTwuR</p>

<p>O3eK+2gVgIUCteTs4Q3khIgrnsY64hxYB/d8bM=X02dh,</p>

<p>LicenseExpiryDate=2099-12-31,</p>

<p>PurchaseDate=2014-09-20</p>

<p>将以上授权码信息填入授权码输入框，点击“增加”按钮，如下所示：</p>

<p>之后，看到授权信息更新了，就表示破解成功，会看到如下成功信息, 如下图：</p>

<p>6，恢复数据</p>

<p>输入授权码：</p>

<p>AAABBw0ODAoPeNptkFtLxDAQhd/zKwI+R9Kwy66FPKxthGhvtF0p4kuso0a6sUwvuP/edissyj4MD</p>

<p>HPOfHOYqzu0tICWeoJy4a+FzzkNwpIK7q1ICF2Ntu3tl5P3Ot89+1SNphnMPCEBwqkJTQ9y9jN+w</p>

<p>zxBPi2a68jW4DpQr/a0rZJS5VmuC0XOBNnjAH/s5bGFxBxABmkcqzzQu2jRTd3bEZaFZvE+AnYzR</p>

<p>JDYWNeDM64G9d1aPJ4TeXxOlOK7cbZbjrbNgkyGwwtg+rbvJpBkHikAR0Adytt0XzFV7R5Y+qQzV</p>

<p>kWZIoVK5FQsWq03YrvdkN/Ekz3S4SXlcpRswPrDdPD/aT+P1nzDMC0CFQCM9+0LlHVNnZQnSTwuR</p>

<p>O3eK+2gVgIUCteTs4Q3khIgrnsY64hxYB/d8bM=X02dh</p>

<p>点击恢复，开始恢复数据，如下所示：</p>

<p>Linux下24M的jira数据文件导入很快，4分钟导入完毕，如下所示：</p>

<p>如果导入报错：</p>

<p>解析文件时发生错误。你的导入文件不正确。 可能是由于文件中含有旧版本的CDATA (<a href="http://jira.atlassian.com/browse/JRA-4980">http://jira.atlassian.com/browse/JRA-4980</a>)。 异常错误 org.xml.sax.SAXParseException; lineNumber: 168270; columnNumber: 16; XML document structures must start and end within the same entity.</p>

<p>解决办法：选择Disable按钮而不选择Enable按钮，如下所示：</p>

<p> 此致，JIRA最新Linux版本6.3.6安装破解以及数据迁移，成功完毕。</p>

<blockquote><p>参考文档:<a href="http://blog.itpub.net/26230597/viewspace-1275597/" title="参考文档">http://blog.itpub.net/26230597/viewspace-1275597/</a></p></blockquote>
]]></content>
  </entry>
  
</feed>
